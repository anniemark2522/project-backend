import dotenv from 'dotenv';
import cloudinary from 'cloudinary';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';

// ‡πÉ‡∏ä‡πâ import.meta.url ‡πÅ‡∏ó‡∏ô __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env
dotenv.config({ path: path.resolve(__dirname, '../.env') });

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloudinary
cloudinary.v2.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET
});

const imageFolder = path.resolve(__dirname, '../db/assets/images/accommodation');
const jsonFilePath = path.resolve(__dirname, '../db/hotel_apt.json');




// ‡πÇ‡∏´‡∏•‡∏î JSON ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
let accData = [];
try {
    accData = JSON.parse(fs.readFileSync(jsonFilePath, 'utf-8'));
} catch (error) {
    console.error('‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:', error);
    process.exit(1);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï JSON
const uploadImagesAndUpdateJSON = async () => {
    const allowedExtensions = ['.jpg', '.jpeg', '.png', '.webp'];

    try {
        const files = fs.readdirSync(imageFolder).filter(file =>
            allowedExtensions.includes(path.extname(file).toLowerCase())
        );

        for (const file of files) {
            const filePath = path.join(imageFolder, file);
            const fileNameWithoutExt = path.parse(file).name;  // ‡πÄ‡∏ä‡πà‡∏ô "1" ‡∏à‡∏≤‡∏Å "1.jpg"

            console.log(`üì§ Uploading: ${filePath}`);

            // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ Cloudinary
            const result = await cloudinary.v2.uploader.upload(filePath, {
                folder: 'accommodation',
                use_filename: true,
                unique_filename: false,
            });

            console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${file} ‚Üí ${result.secure_url}`);

            // ‡∏´‡∏≤‡πÉ‡∏ô JSON ‡∏ß‡πà‡∏≤‡∏°‡∏µ foodId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏±‡πâ‡∏¢
            const accItem = accData.find(item => item.hotelId === fileNameWithoutExt);
            if (accItem) {
                accItem.image = result.secure_url;  // ‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏•‡∏á‡πÉ‡∏ô image
            } else {
                console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ AccId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå ${file}`);
            }
        }

        // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON
        fs.writeFileSync(jsonFilePath, JSON.stringify(accData, null, 2), 'utf-8');
        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå JSON ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    } catch (error) {
        console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
    }
};

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
uploadImagesAndUpdateJSON();
